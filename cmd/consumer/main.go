package main

import (
	"context"
	"log"

	"flowtracer/proto/flowtracerpb"

	"github.com/IBM/sarama"
	"google.golang.org/protobuf/proto"
)

type Consumer struct{}

func (Consumer) Setup(_ sarama.ConsumerGroupSession) error   { return nil }
func (Consumer) Cleanup(_ sarama.ConsumerGroupSession) error { return nil }

func (Consumer) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
	for msg := range claim.Messages() {
		var req flowtracerpb.SendTransactionRequest
		if err := proto.Unmarshal(msg.Value, &req); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ proto: %v", err)
			// –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å
			session.MarkMessage(msg, "")
			continue
		}

		log.Printf("üì• –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: %s -> %s, —Å—É–º–º–∞=%d, –∫–ª—é—á=%s",
			req.FromUsername, req.ToUsername, req.Amount, req.IdempotencyKey)

		// TODO: –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏

		session.MarkMessage(msg, "")
	}
	return nil
}

func main() {
	brokers := []string{"kafka:9092"}
	groupID := "flowtracer-consumer"
	topics := []string{"transactions"}

	config := sarama.NewConfig()
	config.Version = sarama.V2_8_0_0
	config.Consumer.Group.Rebalance.Strategy = sarama.NewBalanceStrategyRoundRobin()
	config.Consumer.Offsets.Initial = sarama.OffsetOldest
	config.Consumer.IsolationLevel = sarama.ReadCommitted
	config.Consumer.Return.Errors = true

	consumerGroup, err := sarama.NewConsumerGroup(brokers, groupID, config)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group: %v", err)
	}
	defer consumerGroup.Close()

	ctx := context.Background()
	handler := Consumer{}

	log.Println("üöÄ –ö–æ–Ω—Å—å—é–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")
	
	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
	go func() {
		for err := range consumerGroup.Errors() {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ consumer: %v", err)
		}
	}()

	for {
		if err := consumerGroup.Consume(ctx, topics, handler); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –≤ consume: %v", err)
		}
	}
}